[{"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\index.tsx":"1","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\pages\\application-page\\all-pages\\AllPages.tsx":"2","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\pages\\application-page\\graph-overview\\GraphOverview.tsx":"3","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\pages\\application-page\\shorcuts\\ShortcutList.tsx":"4","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\navbar\\Navbar.tsx":"5","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\app\\App.tsx":"6","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\helpers\\notes.helper.ts":"7","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\store\\utils\\index.ts":"8","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\note\\page\\Page.tsx":"9","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\note\\Note.tsx":"10","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\store\\actions\\actions.ts":"11","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\store\\actionsCreators\\actionsCreators.ts":"12","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\store\\reducers\\reducer.ts":"13","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\sidebar\\Sidebar.tsx":"14"},{"size":717,"mtime":1611068816492,"results":"15","hashOfConfig":"16"},{"size":257,"mtime":1610379844438,"results":"17","hashOfConfig":"16"},{"size":247,"mtime":1610379844421,"results":"18","hashOfConfig":"16"},{"size":224,"mtime":1610379935388,"results":"19","hashOfConfig":"16"},{"size":1037,"mtime":1610547067810,"results":"20","hashOfConfig":"16"},{"size":1117,"mtime":1611067950669,"results":"21","hashOfConfig":"16"},{"size":191,"mtime":1611068127696,"results":"22","hashOfConfig":"16"},{"size":1176,"mtime":1611068810323,"results":"23","hashOfConfig":"16"},{"size":7052,"mtime":1611068692290,"results":"24","hashOfConfig":"16"},{"size":2380,"mtime":1611068707281,"results":"25","hashOfConfig":"16"},{"size":322,"mtime":1611068795758,"results":"26","hashOfConfig":"16"},{"size":7724,"mtime":1611068800665,"results":"27","hashOfConfig":"16"},{"size":877,"mtime":1611068806397,"results":"28","hashOfConfig":"16"},{"size":5460,"mtime":1611068877826,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tjamb9",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\index.tsx",[],"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\pages\\application-page\\all-pages\\AllPages.tsx",[],"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\pages\\application-page\\graph-overview\\GraphOverview.tsx",[],"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\pages\\application-page\\shorcuts\\ShortcutList.tsx",[],"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\navbar\\Navbar.tsx",["62","63"],"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\app\\App.tsx",[],"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\helpers\\notes.helper.ts",[],"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\store\\utils\\index.ts",["64","65","66"],"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\note\\page\\Page.tsx",["67","68","69","70"],"/* eslint-disable import/no-unresolved */\nimport React, { useEffect, useState } from 'react';\n// import { update } from 'lodash';\nimport autosize from 'autosize';\nimport { ArrowDropDown, ArrowRight } from '@material-ui/icons';\nimport { connect } from 'react-redux';\nimport shortid from 'shortid';\nimport { IPage } from '../../../models/notes.model';\nimport './page.scss';\n\n// eslint-disable-next-line import/extensions\nimport {\n  addNeighbor, becomeChild,\n  removePage, levelUp, updateContent, addChild, changeFocusElement, // @ts-ignore\n} from '../../../store/actionsCreators/actionsCreators';\nimport { selectNote } from '../../../store/utils';\n\nconst mapStateToProps = (state: any, ownProps: any) => ({\n  notes: state.notes,\n  focusComponentPath: state.focusComponentPath,\n  ...ownProps,\n});\n\nconst mapDispatchToProps = {\n  addNeighbor, becomeChild, removePage, levelUp, updateContent, addChild, changeFocusElement,\n};\n\nfunction Page(props: any) {\n  const {\n    content, notes, pagePath, currentPage, list, focusComponentPath, textInputHeight, noteTitle,\n  } = props;\n\n  const body: IPage[] = selectNote(noteTitle, notes)?.body;\n\n  let childrenComponents = (<span>{ }</span>);\n  const [pageContent, setContent] = useState(content);\n  const [showNestedPages, setNestedPagesVisibility] = useState(true);\n\n  // setNestedPagesVisibility(true);\n  // let showNestedPages = true;\n\n  let textInput: HTMLTextAreaElement | null = null;\n\n  useEffect(() => {\n    console.log('focusComponentPath', focusComponentPath);\n    if (JSON.stringify(currentPage.pagePath) === JSON.stringify(focusComponentPath)) {\n      (textInput as HTMLTextAreaElement).focus();\n    }\n    autosize(textInput as HTMLTextAreaElement);\n  });\n\n  const onAddNeighbor = () => {\n    props.addNeighbor(body, { currentPage, list, noteTitle });\n  };\n\n  // const onAddChild = () => {\n  //   props.addChild(body, { currentPage });\n  // };\n\n  const onBecomeChild = () => {\n    if (currentPage.pageId === 0) {\n      return;\n    }\n    props.becomeChild(body, { currentPage, noteTitle });\n  };\n\n  const onLevelUp = () => {\n    if (currentPage.pagePath && currentPage.pagePath.length === 1) {\n      return;\n    }\n    props.levelUp(body, { currentPage, noteTitle });\n  };\n\n  const onRemove = () => {\n    if (currentPage.nestedPages && currentPage.nestedPages.length > 0) {\n      return;\n    }\n\n    if (pageContent && pageContent.length > 0) {\n      return;\n    }\n\n    props.removePage(body, { currentPage, noteTitle });\n  };\n\n  const onChangeFocusElement = (direction: string = 'down') => {\n    props.changeFocusElement(direction, body, { currentPage, list, noteTitle });\n  };\n\n  if (currentPage.nestedPages && currentPage.nestedPages.length > 0) {\n    // делаем из вложеннех страниц компоненты\n    childrenComponents = currentPage.nestedPages.map((item: IPage, index: number, arr: IPage[]) => {\n      const NewPage: any = connect(mapStateToProps, mapDispatchToProps)(Page);\n      return (\n        <NewPage\n          key={shortid.generate()}\n          content={item.content}\n          nestedPages={item.nestedPages}\n          pagePath={item.pagePath}\n          currentPage={item}\n          list={arr}\n          textInputHeight={item.textInputHeight}\n          noteTitle={noteTitle}\n        />\n      );\n    });\n  }\n\n  const onUpdateContent = (value: string) => {\n    let currentPageLink: any = body;\n    for (let i = 0; i < pagePath.length; i += 1) {\n      currentPageLink = currentPageLink[pagePath[i]];\n    }\n\n    currentPageLink.content = value;\n    currentPageLink.textInputHeight = (textInput as HTMLTextAreaElement).clientHeight;\n  };\n\n  const onBlur = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    if (e.target.value === content) {\n      return;\n    }\n\n    onUpdateContent(e.target.value);\n    props.updateContent(body, { noteTitle });\n  };\n\n  const onChangeContent = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    console.log(e);\n    console.log(e.target.value);\n    let str: string = e.target.value;\n    if (str && (e.nativeEvent as InputEvent).data === '[') {\n      str = `${str}]`;\n      setContent(str);\n      e.target.selectionEnd = str.length - 5;\n    } else {\n      setContent(str);\n    }\n    autosize(textInput as HTMLTextAreaElement);\n  };\n\n  const onEnterPressHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    const contentValue: string = (e.target as HTMLTextAreaElement).value;\n    if (e.key === 'Tab') {\n      e.preventDefault();\n      onUpdateContent(contentValue);\n      onBecomeChild();\n    }\n    if (e.key === 'Enter') {\n      if ((contentValue && contentValue.length > 0) || currentPage.pagePath.length === 1) {\n        onUpdateContent(contentValue);\n        // if (currentPage.nestedPages.length > 0) {\n        //   onAddChild();\n        //   return;\n        // }\n        onAddNeighbor();\n        return;\n      }\n      onUpdateContent('');\n      onLevelUp();\n    }\n\n    if (e.key === 'Backspace') {\n      onRemove();\n    }\n\n    if (e.key === 'ArrowUp') {\n      onUpdateContent(contentValue);\n      onChangeFocusElement('up');\n    }\n\n    if (e.key === 'ArrowDown') {\n      onUpdateContent(contentValue);\n      onChangeFocusElement();\n    }\n  };\n\n  const toggleNestedPagesVisibility = () => {\n    console.log('click');\n    // showNestedPages = !showNestedPages;\n    setNestedPagesVisibility(!showNestedPages);\n  };\n\n  return (\n    <div className=\"page-container\">\n      <div className=\"current-page__controls\">\n        <span className=\"open-page__wrapper\">\n          <button\n            type=\"button\"\n            className={`nested-pages-button ${currentPage.nestedPages.length > 0 ? 'nested-pages-button--show' : 'nested-pages-button--hidden'}`}\n            onClick={toggleNestedPagesVisibility}\n          >\n            {showNestedPages ? <ArrowDropDown fontSize=\"small\" htmlColor=\"#000\" /> : <ArrowRight fontSize=\"small\" htmlColor=\"#000\" />}\n          </button>\n          <span className=\"open-page\" />\n        </span>\n        <textarea\n          className=\"text-input\"\n          style={{ height: `${textInputHeight}px` }}\n          ref={(textarea: HTMLTextAreaElement) => { textInput = textarea; }}\n          value={pageContent}\n          onBlur={onBlur}\n          onChange={onChangeContent}\n          onKeyDown={onEnterPressHandler}\n        />\n        {/* <input\n          type=\"text\"\n          ref={(input: HTMLInputElement) => { textInput = input; }}\n          value={pageContent}\n          onBlur={onBlur}\n          onChange={onChangeContent}\n          onKeyDown={onEnterPressHandler}\n        /> */}\n        {/* <button type=\"button\" onClick={onAddNeighbor}>Add neighbor</button>\n        <button type=\"button\" onClick={onBecomeChild}>Become a child</button>\n        <button type=\"button\" onClick={onRemove}>x</button>\n        <button type=\"button\" onClick={onLevelUp}>up</button> */}\n      </div>\n      <div className={`nestedPages ${showNestedPages ? 'nestedPages--show' : 'nestedPages--hidden'}`}>{childrenComponents}</div>\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);\n","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\note\\Note.tsx",["71","72"],"/* eslint-disable react/prop-types */\nimport React from 'react';\n// import axios from 'axios';\nimport shortid from 'shortid';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Page from './page/Page';\nimport { INote, IPage } from '../../models/notes.model';\nimport { selectNote } from '../../store/utils';\nimport RSCloneService from '../../services/RSClone.service';\nimport './note.scss';\n\nclass Note extends React.Component {\n  service: RSCloneService;\n\n  private isSaving = false;\n\n  constructor(props: any) {\n    super(props);\n    this.service = new RSCloneService();\n  }\n\n  getPagesComponents() {\n    const { body } = this.props as any;\n    const content: any[] = body.map(this.renderPage.bind(this));\n    return content;\n  }\n\n  async saveNote(currentNote: INote, id: string) {\n    this.isSaving = true;\n    try {\n      await this.service.updateNote(currentNote, id);\n      this.isSaving = false;\n    } catch (e) {\n      this.isSaving = false;\n    }\n    console.log('the note was saved');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  renderPage(title: string, page: IPage, index: number, arr: IPage[]) {\n    return (\n      <Page\n        key={shortid.generate()}\n        noteTitle={title}\n        content={page.content}\n        nestedPages={page.nestedPages}\n        pagePath={page.pagePath}\n        currentPage={page}\n        list={arr}\n        textInputHeight={page.textInputHeight}\n      />\n    );\n  }\n\n  render() {\n    console.log('render');\n    // eslint-disable-next-line react/prop-types\n    const { notes, title, id } = (this.props as any);\n    const currentNote: INote | null = selectNote(title, notes);\n\n    const contentFromRedux: any[] = currentNote\n      ? currentNote.body.map(this.renderPage.bind(this, title))\n      : null;\n\n    return (\n      <div className=\"note-container\">\n        <h1 className=\"note__title\">{title}</h1>\n        <div className=\"note__pages\">\n          {contentFromRedux}\n        </div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={this.isSaving}\n          onClick={() => this.saveNote((currentNote as INote), id)}\n        >\n          Save the note\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, props: any) => ({\n  ...props,\n  notes: state.notes,\n});\n\nexport default connect(mapStateToProps)(Note);\n","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\store\\actions\\actions.ts",[],"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\store\\actionsCreators\\actionsCreators.ts",["73"],"import { INote, IPage } from '../../models/notes.model';\nimport {\n  ADD_NOTE, CHANGE_FOCUS_ELEMENT, UPDATE_NOTE_BODY,\n} from '../actions/actions';\n\nexport type PagePath = (number | string);\n\nconst TEXT_INPUT_HEIGHT = 24;\n\nconst updateNestedPagesPath = (newRootPath: PagePath[], nestedPages: IPage[]): void => {\n  for (let i = 0; i < nestedPages.length; i += 1) {\n    const childOldPath: (string | number)[] = nestedPages[i].pagePath;\n    const childNewPath: (string | number)[] = [\n      ...newRootPath,\n      ...childOldPath.slice(-2),\n    ];\n    // eslint-disable-next-line no-param-reassign\n    nestedPages[i].pagePath = childNewPath;\n    if (nestedPages[i].nestedPages.length > 0) {\n      // eslint-disable-next-line no-unused-vars\n      updateNestedPagesPath(childNewPath, nestedPages[i].nestedPages);\n    }\n  }\n};\n\nconst getFocusPathOnRemove = (pagePath: PagePath[]) => {\n  const pageId: number = (pagePath.slice(-1)[0] as number);\n  if (pageId === 0) {\n    return pagePath.slice(0, -2);\n  }\n\n  return [...pagePath.slice(0, -1), pageId - 1];\n};\n\nconst updateIds = (nestedPages: IPage[]): void => {\n  for (let i = 0; i < nestedPages.length - 1; i += 1) {\n    // eslint-disable-next-line no-param-reassign\n    nestedPages[i].pageId = i;\n    // eslint-disable-next-line no-param-reassign\n    nestedPages[i].pagePath = [...nestedPages[i].pagePath.slice(-1), i];\n  }\n};\n\nfunction addNeighbor(body: any, params: { currentPage: IPage; list: IPage[], noteTitle: string }) {\n  const { list, currentPage, noteTitle } = params;\n  const { pagePath } = currentPage;\n  const newPageId: number = list.length;\n  const newNeighborPath: PagePath[] = [\n    ...pagePath.slice(0, -1),\n    newPageId,\n  ];\n  const newNeighbor: IPage = {\n    pageId: newPageId,\n    pageLink: '',\n    pagePath: newNeighborPath,\n    content: '',\n    nestedPages: [],\n    textInputHeight: TEXT_INPUT_HEIGHT,\n  };\n\n  let pageParentList: any = body;\n  for (let i = 0; i < pagePath.length - 1; i += 1) {\n    pageParentList = pageParentList[pagePath[i]];\n  }\n\n  // pageParentList.splice(currentPage.pageId + 1, 0, newNeighbor);\n  pageParentList.push(newNeighbor);\n  // for (let i = 0; i < pageParentList.length; i += 1) {\n  //   pageParentList[i] = {\n  //     ...pageParentList[i],\n  //     pageId: i,\n  //     content: `${i} Inner page content`,\n  //     pagePath: [...pageParentList[i].pagePath.slice(0, -1), i],\n  //   };\n  // }\n  return {\n    type: UPDATE_NOTE_BODY,\n    body: [...body],\n    title: noteTitle,\n    focusComponentPath: newNeighborPath,\n  };\n}\n\nfunction becomeChild(body: any, params: { currentPage: IPage, noteTitle: string }) {\n  const { currentPage, noteTitle } = params;\n  const { pagePath } = currentPage;\n  let pageParentList: any = body;\n  for (let i = 0; i < pagePath.length - 1; i += 1) {\n    pageParentList = pageParentList[pagePath[i]];\n  }\n\n  const newParentPageIndex: number = (pagePath.slice(-1)[0] as number) - 1;\n  const newParentPage: IPage = pageParentList[newParentPageIndex];\n\n  const newChildPageIndex: number = newParentPage.nestedPages.length;\n  const newChildPagePath: (string | number)[] = [\n    ...newParentPage.pagePath,\n    'nestedPages',\n    newChildPageIndex,\n  ];\n  const newChildPage: IPage = {\n    ...currentPage,\n    pageId: newChildPageIndex,\n    pagePath: newChildPagePath,\n  };\n\n  updateNestedPagesPath(newChildPage.pagePath, newChildPage.nestedPages);\n\n  newParentPage.nestedPages.push(newChildPage);\n  pageParentList.splice(currentPage.pageId, 1);\n\n  for (let i = 0; i < pageParentList.length; i += 1) {\n    pageParentList[i] = {\n      ...pageParentList[i],\n      pageId: i,\n      pagePath: [...pageParentList[i].pagePath.slice(0, -1), i],\n    };\n  }\n\n  console.log('becomeChild', body);\n  return {\n    type: UPDATE_NOTE_BODY,\n    body: [...body],\n    title: noteTitle,\n    focusComponentPath: newChildPagePath,\n  };\n}\n\nfunction removePage(body: any, params: { currentPage: IPage, noteTitle: string }) {\n  const { currentPage, noteTitle } = params;\n  const { pagePath } = currentPage;\n  let pageParentList: any = body;\n  for (let i = 0; i < pagePath.length - 1; i += 1) {\n    pageParentList = pageParentList[pagePath[i]];\n  }\n  pageParentList.splice(currentPage.pageId, 1);\n\n  for (let i = 0; i < pageParentList.length; i += 1) {\n    pageParentList[i] = {\n      ...pageParentList[i],\n      pageId: i,\n      pagePath: [...pageParentList[i].pagePath.slice(0, -1), i],\n    };\n  }\n\n  const newFocusComponentPath: (string | number)[] = getFocusPathOnRemove(pagePath);\n  return {\n    type: UPDATE_NOTE_BODY,\n    body: [...body],\n    title: noteTitle,\n    focusComponentPath: newFocusComponentPath,\n  };\n}\n\nfunction levelUp(body: any, params: { currentPage: IPage, noteTitle: string }) {\n  const { currentPage, noteTitle } = params;\n  const { pagePath } = currentPage;\n  let pageParentList: any = body;\n  for (let i = 0; i < pagePath.length - 1; i += 1) {\n    pageParentList = pageParentList[pagePath[i]];\n  }\n\n  let newPageParentList: any = body;\n  for (let i = 0; i < pagePath.length - 3; i += 1) {\n    newPageParentList = newPageParentList[pagePath[i]];\n  }\n\n  const newChildPageIndex: number = newPageParentList.length;\n  const newChildPagePath: (string | number)[] = [\n    ...currentPage.pagePath.slice(0, -3),\n    newChildPageIndex,\n  ];\n\n  const newChildPage: IPage = {\n    ...currentPage,\n    pageId: newChildPageIndex,\n    pagePath: newChildPagePath,\n  };\n\n  updateNestedPagesPath(newChildPage.pagePath, newChildPage.nestedPages);\n\n  newPageParentList.push(newChildPage);\n  pageParentList.splice(currentPage.pageId, 1);\n\n  for (let i = 0; i < pageParentList.length; i += 1) {\n    pageParentList[i] = {\n      ...pageParentList[i],\n      pageId: i,\n      pagePath: [...pageParentList[i].pagePath.slice(0, -1), i],\n    };\n  }\n  return {\n    type: UPDATE_NOTE_BODY,\n    body: [...body],\n    title: noteTitle,\n    focusComponentPath: newChildPagePath,\n  };\n}\n\nfunction addChild(body: any, params: { currentPage: IPage, noteTitle: string }) {\n  const { currentPage, noteTitle } = params;\n  const { pagePath } = currentPage;\n\n  const newPageId: number = 0;\n  const newChildPath: PagePath[] = [\n    ...pagePath,\n    'nestedPages',\n    newPageId,\n  ];\n  const newChild: IPage = {\n    pageId: newPageId,\n    pageLink: '',\n    pagePath: newChildPath,\n    content: '',\n    nestedPages: [],\n    textInputHeight: TEXT_INPUT_HEIGHT,\n  };\n\n  currentPage.nestedPages.push(newChild);\n\n  updateIds(currentPage.nestedPages);\n  updateNestedPagesPath(currentPage.pagePath, currentPage.nestedPages);\n\n  return {\n    type: UPDATE_NOTE_BODY,\n    body: [...body],\n    title: noteTitle,\n    focusComponentPath: newChildPath,\n  };\n}\n\nfunction changeFocusElement(\n  direction: string, body: any, params: { currentPage: IPage; list: IPage[], noteTitle: string },\n) {\n  const { currentPage, list, noteTitle } = params;\n  const { pagePath, pageId } = currentPage;\n\n  let newFocusPath: PagePath[];\n\n  if (direction === 'up') {\n    if (pageId > 0) {\n      newFocusPath = [...pagePath.slice(0, -1), pageId - 1];\n    } else {\n      newFocusPath = [...pagePath.slice(0, -2)];\n    }\n  } else if (pageId >= list.length - 1) {\n    newFocusPath = [...pagePath];\n  } else {\n    newFocusPath = [...pagePath.slice(0, -1), pageId + 1];\n  }\n\n  return {\n    type: CHANGE_FOCUS_ELEMENT,\n    title: noteTitle,\n    focusComponentPath: newFocusPath,\n  };\n}\n\nfunction updateContent(body: any, params: { noteTitle: string }) {\n  const { noteTitle } = params;\n  return {\n    type: UPDATE_NOTE_BODY,\n    title: noteTitle,\n    body: [...body],\n  };\n}\n\nfunction addNote(note: INote) {\n  return {\n    type: ADD_NOTE,\n    note,\n  };\n}\n\nexport {\n  removePage,\n  addNeighbor,\n  becomeChild,\n  levelUp,\n  updateContent,\n  addChild,\n  changeFocusElement,\n  addNote,\n};\n","C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\store\\reducers\\reducer.ts",[],"C:\\Users\\123\\WebstormProjects\\ebanina\\rsclone\\src\\components\\sidebar\\Sidebar.tsx",["74"],"import React, { useState } from 'react';\nimport {\n  makeStyles, Theme, createStyles,\n} from '@material-ui/core/styles';\nimport {\n  List, ListItem, ListItemText,\n  Drawer, ListItemIcon, Divider, fade, Link,\n} from '@material-ui/core';\nimport DateRange from '@material-ui/icons/DateRange';\nimport BubbleChart from '@material-ui/icons/BubbleChart';\nimport Grade from '@material-ui/icons/Grade';\nimport MenuOpenIcon from '@material-ui/icons/MenuOpen';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport './sidebar.scss';\nimport { Link as RouterLink } from 'react-router-dom';\nimport GraphNavigation from './GraphNavigation';\nimport withRSCloneService from '../hoc-helper/withRSCloneService';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  link: {\n    color: '#5c7080',\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'none',\n    },\n  },\n  linkItem: {\n    '&:hover': {\n      backgroundColor: fade('#fff', 0.15),\n    },\n  },\n  divider: {\n    backgroundColor: fade('#fff', 0.15),\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n    backgroundColor: '#182026',\n  },\n  showButton: {\n    position: 'fixed',\n    padding: '4px',\n    width: '28px',\n    height: '28px',\n    top: '15px',\n    left: '15px',\n    cursor: 'pointer',\n    borderRadius: '10px',\n    '&:hover': {\n      backgroundColor: fade('#565555', 0.15),\n    },\n  },\n  hideButton: {\n    position: 'absolute',\n    padding: '4px',\n    width: '28px',\n    height: '28px',\n    top: '15px',\n    left: '195px',\n    borderRadius: '10px',\n    cursor: 'pointer',\n    '&:hover': {\n      backgroundColor: fade('#fff', 0.15),\n    },\n  },\n  listItemText: {\n    fontWeight: 600,\n  },\n  listIcon: {\n    minWidth: '44px',\n  },\n}));\n\nconst Sidebar = () => {\n  const [open, setOpen] = useState(true);\n  // const { rsCloneService: service } = props;\n  const classes = useStyles();\n\n  // useEffect(() => {\n  //   const login = async () => {\n  //     await service.login('valigertt@gmail.com', 'Hertas12');\n  //     console.log(await service.getNotes().then((res: any) => res.DATA));\n  //   };\n  //\n  //   login();\n  // });\n\n  const toggleSidebar = (): void => {\n    setOpen(!open);\n  };\n\n  const onItemSelected = () => {\n    console.log(\"Yep, i'm selected\");\n  };\n\n  const drawer = (\n    <div>\n\n      <MenuOpenIcon className={classes.hideButton} htmlColor=\"#5c7080\" onClick={toggleSidebar} />\n      <GraphNavigation name=\"ALEKSEY\" />\n\n      <div className={classes.toolbar} />\n      <List className={classes.link}>\n        <Link component={RouterLink} to=\"/app\" className={classes.link}>\n          <ListItem button onClick={onItemSelected} className={classes.linkItem}>\n            <ListItemIcon classes={{\n              root: classes.listIcon,\n            }}\n            >\n              <DateRange htmlColor=\"#5c7080\" />\n            </ListItemIcon>\n            <ListItemText\n              primary=\"DAILY NOTES\"\n              classes={{\n                primary: classes.listItemText,\n              }}\n            />\n          </ListItem>\n        </Link>\n        <Link component={RouterLink} to=\"/app/graph\" className={classes.link}>\n          <ListItem button onClick={onItemSelected} className={classes.linkItem}>\n            <ListItemIcon classes={{\n              root: classes.listIcon,\n            }}\n            >\n              <BubbleChart htmlColor=\"#5c7080\" />\n            </ListItemIcon>\n            <ListItemText\n              primary=\"GRAPH OVERVIEW\"\n              classes={{\n                primary: classes.listItemText,\n              }}\n            />\n          </ListItem>\n        </Link>\n        <Link component={RouterLink} to=\"/app/pages\" className={classes.link}>\n          <ListItem button onClick={onItemSelected} className={classes.linkItem}>\n            <ListItemIcon classes={{\n              root: classes.listIcon,\n            }}\n            >\n              <MenuIcon htmlColor=\"#5c7080\" />\n            </ListItemIcon>\n            <ListItemText\n              primary=\"ALL PAGES\"\n              classes={{\n                primary: classes.listItemText,\n              }}\n            />\n          </ListItem>\n        </Link>\n        <Divider className={classes.divider} />\n        <Link component={RouterLink} to=\"/app/shortcut\" className={classes.link}>\n          <ListItem button onClick={onItemSelected} className={classes.linkItem}>\n            <ListItemIcon classes={{\n              root: classes.listIcon,\n            }}\n            >\n              <Grade htmlColor=\"#5c7080\" />\n            </ListItemIcon>\n            <ListItemText\n              primary=\"SHORTCUTS\"\n              classes={{\n                primary: classes.listItemText,\n              }}\n            />\n          </ListItem>\n        </Link>\n      </List>\n    </div>\n  );\n\n  if (!open) {\n    return <MenuIcon onClick={toggleSidebar} htmlColor=\"#5c7080\" className={classes.showButton} />;\n  }\n  return (\n    <nav className={classes.drawer} aria-label=\"mailbox folders\">\n      <Drawer\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        variant=\"permanent\"\n        open\n      >\n        {drawer}\n      </Drawer>\n    </nav>\n  );\n};\n\nexport default withRSCloneService(Sidebar);\n",{"ruleId":"75","severity":1,"message":"76","line":19,"column":3,"nodeType":"77","messageId":"78","endLine":19,"endColumn":14},{"ruleId":"75","severity":1,"message":"76","line":23,"column":3,"nodeType":"77","messageId":"78","endLine":23,"endColumn":14},{"ruleId":"75","severity":1,"message":"76","line":8,"column":3,"nodeType":"77","messageId":"78","endLine":8,"endColumn":14},{"ruleId":"75","severity":1,"message":"76","line":9,"column":3,"nodeType":"77","messageId":"78","endLine":9,"endColumn":14},{"ruleId":"75","severity":1,"message":"76","line":10,"column":3,"nodeType":"77","messageId":"78","endLine":10,"endColumn":14},{"ruleId":"75","severity":1,"message":"76","line":45,"column":5,"nodeType":"77","messageId":"78","endLine":45,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":129,"column":5,"nodeType":"77","messageId":"78","endLine":129,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":130,"column":5,"nodeType":"77","messageId":"78","endLine":130,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":179,"column":5,"nodeType":"77","messageId":"78","endLine":179,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":37,"column":5,"nodeType":"77","messageId":"78","endLine":37,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":57,"column":5,"nodeType":"77","messageId":"78","endLine":57,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":120,"column":3,"nodeType":"77","messageId":"78","endLine":120,"endColumn":14},{"ruleId":"75","severity":1,"message":"76","line":107,"column":5,"nodeType":"77","messageId":"78","endLine":107,"endColumn":16},"no-console","Unexpected console statement.","MemberExpression","unexpected"]